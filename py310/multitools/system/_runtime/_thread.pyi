from .._refs import *
from typing import Optional, Any


class Thread(metaclass=MultiMeta):
    def __init__(self, main: Optional[callable] = ...) -> None: ...
    def main(self, *args, **kwargs) -> Any: ...
    def start(self, *args, **kwargs) -> Thread: ...
    def __call__(self, *args, **kwargs) -> Thread: ...
    def join(self, timeout: Optional[int] = ...) -> Any: ...
    @property
    def result(self) -> Any: ...
    @property
    def state(self) -> int: ...


class ThreadError(RuntimeError):
    def __init__(self, *args, state: int = ...): ...
    @property
    def state(self) -> int: ...

