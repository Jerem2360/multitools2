from typing import Any
from ctypes import Array as _stdArr


class Module(object):

    def __init__(self, name: str, doc: Any = None) -> None:
        self.__annotations__: dict[str, Any] = ...
        self.__dict__: dict[str, Any] = ...

    @staticmethod
    def __new__(cls, *args, **kwargs) -> Module: ...
    def __delattr__(self, name: str) -> None: ...
    def __dir__(self) -> list[str]: ...
    def __getattribute__(self, name: str) -> Any: ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name: str, value: Any) -> None: ...


class CData(object):
    def __ctypes_from_outparam__(self) -> CData: ...
    def __reduce__(self) -> tuple: ...
    def __setstate__(self, dict: dict, data: str, len: int) -> None: ...
    _b_base_: object = ...
    _b_needsfree_: int = ...
    _objects: object = ...


class SimpleCData(CData):
    def __bool__(self) -> bool: ...
    def __repr__(self) -> str: ...
    # noinspection PyMethodParameters
    @staticmethod
    def __new__(*args, **kwargs) -> SimpleCData: ...
    def __mul__(self, other: int) -> type[_stdArr]: ...
    value = ...


class Function(object):
    __annotations__: dict[str, type] = ...
    __builtins__: dict[str, Any] = ...
    __closure__: tuple[str, ...] | None = ...
    __code__ = ...
    __defaults__: tuple[Any, ...] | None = ...
    __globals__: dict[str, Any] = ...
    __kwdefaults__ = ...
    __module__: str = ...
    __name__: str = ...
    __qualname__: str = ...

    def __call__(self, *args, **kwargs) -> Any: ...
    def __new__(cls, code, globals: dict[str, Any], name: str = ..., argdefs = ..., closure = ...) -> Function: ...



