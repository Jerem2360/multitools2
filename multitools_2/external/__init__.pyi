from typing import TypeVar, Any, overload, Callable, Protocol
from .._builtindefs import CData as _CData


from .. import _builtindefs
from . import _c_types as typedefs


class _DecoratedFunc(Protocol):
    __annotations__: dict[str, type] = ...
    __name__: str = ...

    def __call__(self, *args, **kwargs) -> Any: ...


NULL = ...

nullptr = ...


_RawPtr = TypeVar("_RawPtr")
_PT = TypeVar("_PT", covariant=True)
_AT = TypeVar("_AT")
_PtrType = _PT | Any

def DllImport(name: str, funcflags: int = ..., libflags: int = ...) -> Callable[[_DecoratedFunc], ExternalFunction]: ...

def GetLastError(hex_: bool = ...) -> int: ...
def sizeof(obj: Any) -> int: ...

def malloc(size: int) -> Pointer: ...
def calloc(count: int, size: int) -> Pointer: ...
# def free(ptr: Pointer) -> None: ...
def realloc(ptr: Pointer, size: int) -> Pointer: ...


class ExternalFunction:
    def __init__(self, *args, **kwargs) -> None:
        self.__handle__: _RawPtr = ...

    def __call__(self, *args, **kwargs) -> Any: ...
    def __repr__(self) -> str: ...


class Library(_builtindefs.Module):
    def __init__(self, handle: int, modname: str) -> None:
        self.__handle__: int = ...

    @overload
    def reference(self, name: str, argtypes: tuple[type] = ..., restype: type = ..., flags: int = ...) -> ExternalFunction: ...
    @overload
    def reference(self, ordinal: int, argtypes: tuple[type] = ..., restype: type = ..., flags: int = ...) -> ExternalFunction: ...
    @staticmethod
    def load(path: str, flags: int = ...) -> Library: ...
    def __getattr__(self, item: str) -> ExternalFunction: ...
    def __getitem__(self, args) -> ExternalFunction: ...
    def __repr__(self) -> str: ...


class Pointer:
    __type__: typedefs.CType[_PT] | None = ...
    __size__: int = ...

    def __class_getitem__(cls, item: typedefs.CType[_PT]) -> type[Pointer[_PT]]: ...
    @classmethod
    def allocate(cls, size: int = ...) -> Pointer[_PT]: ...
    @classmethod
    def addressof(cls, obj: _PT) -> Pointer[_PT]: ...
    def __new__(cls, address: int, *args, **kwargs) -> Pointer[_PT]: ...
    def dereference(self) -> _PT: ...
    @classmethod
    def from_c(cls, ptr: _CData) -> Pointer[_PT]: ...
    def to_c(self) -> _CData: ...
    def __init__(self, *args, **kwargs):
        self.__address__: int = ...


            ## ------------------- Work in Progress! -----------------------  ##


class Array:
    __type__: typedefs.CType[_AT] = ...
    __size__: int = ...

    def __class_getitem__(cls, item: typedefs.CType[_AT]) -> type[Array[_AT]]: ...

    def __init__(self, *elements: _AT) -> None:
        self.__pointer__: Pointer = ...

    def __getitem__(self, item: int) -> _AT: ...
    def __setitem__(self, key: int, value: _AT) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Array: ...
    def __next__(self) -> _AT: ...
    def __repr__(self) -> str: ...
    def to_c(self) -> _CData: ...
    @classmethod
    def from_c(cls, cvalue: _CData) -> Array[_AT]: ...

