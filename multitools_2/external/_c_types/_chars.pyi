from typing import Protocol as _Protocol, Any as _Any

from ._base import CType as _CType


class _CValue(_Protocol):
    value: _Any = ...


class Byte(bytes, metaclass=_CType):
    def __new__(cls, value: bytes, *args, **kwargs) -> Byte: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class UByte(bytes, metaclass=_CType):
    def __new__(cls, value: bytes, *args, **kwargs) -> UByte: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Char(str, metaclass=_CType):
    def __new__(cls, value: str | bytes, *args, **kwargs) -> Char: ...
    def to_c(self) -> _CValue: ...

class WideChar(str, metaclass=_CType):
    def __new__(cls, value: str, *args, **kwargs) -> WideChar: ...
