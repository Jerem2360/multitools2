from typing import Any as _Any, Protocol as _Protocol, Callable as _Callable
from .._s import SimpleCData as _SimpleCData


class _CValue(_Protocol):
    value: _Any = ...


class CType(type):
    def __new__(mcs, name: str, bases: tuple[type], np: dict[str, _Any]) -> CType: ...
    def __init__(cls, *args, **kwargs):
        cls.__c_base__: type[_SimpleCData] = ...
        cls.__size__: int = ...
        cls.base: str = ...
        # methods:
        cls.from_c: _Callable[[_SimpleCData], cls] = ...
        cls.to_c: _Callable[[], _SimpleCData] = ...

    def __class_getitem__(mcs, item: type) -> type: ...


