from .base import CType


class Byte(bytes, metaclass=CType):
    base: str = ...

    def __new__(cls, value: bytes, *args, **kwargs) -> Byte: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __bytes__(self) -> bytes: ...


class UByte(bytes, metaclass=CType):
    base: str = ...

    def __new__(cls, value: bytes, *args, **kwargs) -> UByte: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __bytes__(self) -> bytes: ...


class Char(str, metaclass=CType):
    base: str = ...

    def __new__(cls, value: str | bytes, *args, **kwargs) -> Char: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __bytes__(self) -> bytes: ...


class WideChar(str, metaclass=CType):
    base: str = ...

    def __new__(cls, value: str, *args, **kwargs) -> WideChar: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __bytes__(self) -> bytes: ...

