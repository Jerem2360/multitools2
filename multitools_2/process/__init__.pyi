from typing import Callable as _Callable, Any as _Any, TypeVar as _TypeVar
from types import TracebackType as _Traceback, FunctionType as _FunctionType, FrameType as _FrameType


_ExcInfo = _TypeVar("_ExcInfo", tuple[type[Exception], Exception, _Traceback], tuple[None, None, None])
_ArgTypedef = list[type]


class Thread:
    """
    Class representing threads.
    When instantiated, this class returns a thread model that can only be called.
    When called, thread models pass given arguments to the function representing its activity upon
    calling it into a separate thread of control. A Thread object representing the actual thread
    of control in a running state is returned.
    """
    def __init__(self, activity: _Callable[[Thread, ...], Any], daemon: bool = ...) -> None: ...
    def __call__(self, *args, **kwargs) -> Thread: ...
    def invoke(self, function: _Callable, *args, **kwargs) -> None: ...
    def settrace(self, function: _Callable[[_FrameType, str, Any], None]): ...
    def join(self) -> None: ...
    def exc_info(self) -> _ExcInfo | None: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def get_main() -> Thread: ...

    state: str = ...
    id: int = ...
    daemon: bool = ...
    result: Any = ...

def __finalize__(*exc_info) -> None: ...

