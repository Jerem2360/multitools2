import types
import typing

from ._meta_ import _MultiGenericAlias
from .errors import *
from .errors._errors import *
from ._debug import debugger


InvalidArg = Ellipsis  # assuming nobody will ever type-check for ellipsis


# constants:
__GENERIC_CHECK__ = '__generic_check__'


# simple values:
cast_types = {
    int: '__int__',
    bytes: '__bytes__',
    float: '__float__',
    bool: '__bool__',
    complex: '__complex__'
}


# functions:
def parse_arguments(arguments, *types, depth=0):
    """
    A simple argument parsing primitive that type-check and tries to
    do type-conversions to the valid types.

    This function takes given arguments and types, and compares them.
    If the argument is of the right type, it is yielded directly.
    If it can be converted to the right type using a magic method,
    the conversion is made and its result is yielded.
    Otherwise, a TypeError of the given depth is raised.

    Note that if Generic aliases are used and provide methods
    to do an exact check, these methods are called to do so.
    Default implementations for generic checking exist in
    the tuple[T, ...], list[T] and dict[KT, VT] generics.
    If no methods are provided, assume we have the right
    value.
    """
    valid_args = []
    for i in range(len(types)):
        arg_val = InvalidArg
        try:
            arg = arguments[i]
        except KeyError or IndexError:
            raise err_depth(ValueError, "The same number of arguments as types must be specified.", depth=1)
        tp = types[i]

        if tp in (Ellipsis, type(Ellipsis)):
            raise err_depth(TypeError, "Ellipsis is not supported by this function.", depth=1)

        if isinstance(tp, (tuple, list)):
            typename = ''
            for t in tp:
                if tp in (Ellipsis, type(Ellipsis)):
                    raise err_depth(TypeError, "Ellipsis is not supported by this function.", depth=1)

                if not isinstance(t, (type, type(None))):
                    raise err_depth(TypeError, TYPE_ERR_STR.format('type | None', type(tp).__name__), depth=1)
                if t is None:
                    t = type(None)
                arg_val_temp = _parse_one_arg(arg, t)
                if arg_val_temp is not InvalidArg:
                    arg_val = arg_val_temp
                typename += t.__name__
                typename += ' | '
            typename = typename.removesuffix(' | ')

        elif isinstance(tp, type):
            arg_val_temp = _parse_one_arg(arg, tp)
            if arg_val_temp is not InvalidArg:  # no need to override a valid value with an invalid one.
                arg_val = arg_val_temp
            typename = tp.__name__

        else:
            raise err_depth(TypeError, TYPE_ERR_STR.format('type | tuple[tp, ...]', type(tp).__name__), depth=1)

        if arg_val is InvalidArg:
            raise err_depth(TypeError, TYPE_ERR_STR.format(typename, type(arg).__name__), depth=depth+1)

        valid_args.append(arg_val)

    return valid_args


def _parse_one_arg(arg, tp):
    # print(repr(arg), tp)

    if tp in (Ellipsis, type(Ellipsis)):
        raise err_depth(TypeError, "Ellipsis is not supported by this function.", depth=2)

    if isinstance(arg, tp):
        return _check_generic(arg, tp)

    if tp in cast_types:
        if not hasattr(arg, cast_types[tp]):
            return InvalidArg
        # print('cast function is', cast_types[tp])
        cast_f = getattr(arg, cast_types[tp])
        return _check_generic(cast_f(), tp)

    debugger.print('not an instance:', tp)
    return InvalidArg


def _check_generic(arg, gen):
    if not isinstance(gen, (types.GenericAlias, _MultiGenericAlias)):
        debugger.print('not generic:', gen)
        return arg

    if gen.__origin__ is list:
        list_t = gen.__args__[0]
        for x in arg:
            if not isinstance(x, list_t):
                return InvalidArg

    if gen.__origin__ is tuple:
        tuple_ts = gen.__args__
        for i in range(len(tuple_ts)):
            if tuple_ts[i] is Ellipsis:
                break
            elem, tp = arg[i], tuple_ts[i]
            if tp is None:
                tp = type(None)
            if (tp in cast_types) and hasattr(elem, cast_types[tp]):
                cast_f = getattr(elem, cast_types[tp])
                arg[i] = _check_generic(cast_f())
        return arg

    if gen.__origin__ is dict:
        pair_t = gen.__args__
        for k, v in arg.items():
            if (pair_t[0] is not Ellipsis) and not isinstance(k, pair_t[0]):
                if (pair_t[0] in cast_types) and hasattr(k, cast_types[pair_t[0]]):
                    cast_f = getattr(k, cast_types[pair_t[0]])
                    return _check_generic(cast_f(), pair_t[0])

            if (pair_t[1] is not Ellipsis) and not isinstance(v, pair_t[1]):
                if (pair_t[1] in cast_types) and hasattr(v, cast_types[pair_t[1]]):
                    cast_f = getattr(v, cast_types[pair_t[1]])
                    return _check_generic(cast_f(), pair_t[1])

        return arg

    debugger.print("has check")
    if hasattr(gen.__origin__, __GENERIC_CHECK__):
        if gen.__origin__.__generic_check__(*gen.__args__):
            return arg
        return InvalidArg

    # if we don't know how to check, assume arg is valid.
    return arg



