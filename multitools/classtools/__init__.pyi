from .._typeshed import *
from typing import TypeVar, Callable


@Decorator
def generic(tp: type, *types: type) -> type: ...


def abstractmethod(fn: Function) -> Function: ...


_Decoration = TypeVar('_Decoration', bound=Callable[[Function | type], Function | type])


class Decorator(object):
    def __init__(self, fn: Callable[[Function | type, ...], Function | type]) -> None:
        self.__func__: Function = ...
        self.__name__: str = ...
        self.__module__: str = ...
        self.__qualname__: str = ...
        self.__annotations__: dict[str, type] = ...
        self.__builtins__: dict[str, object] = ...
        self.__closure__: tuple[Cell, ...] = ...
        self.__code__: Code = ...
        self.__defaults__: tuple | None = ...
        self.__globals__: dict[str, object] = ...
        self.__kwdefaults__: dict | None = ...

    def __call__(self, *args, **kwargs) -> _Decoration: ...
    def __getattr__(self, name: str) -> object: ...


