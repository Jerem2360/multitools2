import ctypes
from typing import NoReturn, overload, Literal, Callable, TypeVar

from ..classtools import Decorator, generic
from .._typeshed import *
# from ._callconv import __cdecl as __cdecl, __stdcall as __stdcall
from . import _callconv


__all__ = [
    "dllimport",
    "sizeof",
    "cast",
    "addressof",
    "NULL",

    "Library",
    "__cdecl",
    "__stdcall",

    "Short",
    "UShort",
    "Int",
    "UInt",
    "Long",
    "ULong",
    "LongLong",
    "ULongLong",

    "Char",
    "WChar",
    "Byte",
    "UByte",
    "String",
    "WString",

    "PyObject",
    "Struct",

    "CFunction",

    "Int",
    "Pointer",
    "Array",
    "Size_t",
    "SSize_t",
]


NULL = ...  # NULL from C / C++


__cdecl: _callconv._CallConv = ...
__stdcall: _callconv._CallConv = ...


@Decorator
def dllimport(fn: Function, source: Library | str, *, callconv: int = ...) -> Callable[[...], CFunction]: ...


def sizeof(op: CType | type[CType], /) -> int: ...


_T = TypeVar("_T", bound=CType)
def cast(val: CType, typ: type[_T], /) -> _T: ...
def addressof(ob: type[_T]) -> Pointer[_T]: ...


class Library(object):
    def __new__(cls, *args, **kwargs) -> Library: ...
    def __init__(self, *args, **kwargs) -> NoReturn: ...
    def __getitem__(self, item: int) -> CFunction: ...
    @overload
    def get_proc(self, name, /, callconv: int = ..., argtypes: tuple[type | ellipsis, ...] = ..., restype: type | None = ...) -> CFunction: ...
    @classmethod
    def load(cls, source: str, /, callconv: int = ...) -> Library: ...
    handle: int = ...


_ArgList = list[type | ellipsis]
_CT = TypeVar("_CT")


class CType(object):
    def __new__(cls, *args, **kwargs) -> CType: ...
    def __init__(self, *values: object) -> None:
        self.__size__: int = ...
    def __repr__(self) -> str: ...
    def __class_getitem__(cls: type[_CT], item) -> type[_CT]: ...
    def __to_ctypes__(self) -> CData: ...
    @classmethod
    def __from_ctypes__(cls, *values: CData) -> CType: ...
    @classmethod
    def with_byteorder(cls, byteorder: Literal['big', 'little']) -> type[CType]: ...
    @classmethod
    def __template__(cls, *args, **kwargs) -> type[CType]: ...
    __type__: str = ...
    __simple__: type[CData] = ...
    __ctype__: str = ...
    __supports_byteorder__: bool = ...
    __simple_name__: str = ...
    __simple_type__: str = ...
    __address__: int = ...


@generic(list[CType | ellipsis], CType | ellipsis | None)
class CFunction(CType):
    __type__: str = ...

    def __new__(cls, *args, **kwargs) -> CFunction: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, address: int) -> None: ...
    @overload
    def __init__(self, address: int, owner: Library) -> None: ...
    @overload
    def __call__(self, *args: CType, **kwargs: CType) -> CType: ...
    def __setattr__(self, key: str, value: object) -> None: ...
    def __repr__(self) -> str: ...
    @classmethod
    def __template__(cls, argtypes: list[CType | ellipsis], restype: CType | ellipsis | None) -> type[CFunction]: ...
    __simple__: type[ctypes.c_void_p] = ...


@generic(type[CType] | None)
class Pointer(CType):
    def __init__(self, value: int, /) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    @classmethod
    def __template__(cls, ptype: type[CType]) -> type[Pointer]: ...
    def to_py(self) -> object: ...
    @classmethod
    def __from_ctypes__(cls, *values: ctypes.pointer) -> Pointer: ...
    def __to_ctypes__(self) -> CData: ...
    def __int__(self) -> int: ...
    contents: CType = ...
    __simple__: type[ctypes.pointer] = ...


@generic(type[CType] | None, int)
class Array(CType):
    def __init__(self, *elements: CType, auto_free: bool = ...) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    @classmethod
    def __template__(cls, atype: type[CType], length: int) -> type[Array]: ...
    def __getitem__(self, item: int) -> CType: ...
    def __setitem__(self, key: int, value: CType) -> None: ...
    def __delitem__(self, key: int) -> None: ...
    def __iter__(self) -> Array: ...
    def __next__(self) -> CType: ...
    def __int__(self) -> int: ...
    def __del__(self) -> None: ...
    @classmethod
    def __from_ctypes__(cls, *values: CData) -> Array: ...
    def __to_ctypes__(self) -> CData: ...
    def free(self) -> None: ...
    def __repr__(self) -> str: ...
    __simple__: type[ctypes.Array] = ...


class String(CType):
    def __init__(self, *values: str) -> None: ...
    def __getitem__(self, item: int) -> Char: ...
    def __setitem__(self, key: int, value: Char) -> None: ...
    def __delitem__(self, key: int) -> None: ...
    def __del__(self) -> None: ...
    def __to_ctypes__(self) -> CData: ...
    @classmethod
    def __from_ctypes__(cls, *values: CData) -> String: ...
    def free(self) -> None: ...
    __type__: str = ...
    __simple__: type[CData] = ...


class WString(CType):
    def __init__(self, *values: str) -> None: ...
    def __getitem__(self, item: int) -> Char: ...
    def __setitem__(self, key: int, value: WChar) -> None: ...
    def __delitem__(self, key: int) -> None: ...
    def __del__(self) -> None: ...
    def __to_ctypes__(self) -> CData: ...
    @classmethod
    def __from_ctypes__(cls, *values: CData) -> WString: ...
    def free(self) -> None: ...
    __type__: str = ...
    __simple__: type[CData] = ...


class Struct(CType):
    def __init__(self, *values: CType) -> None: ...
    def __getattr__(self, item: str) -> object: ...
    def __setattr__(self, key: str, value: object) -> None: ...
    def __repr__(self) -> str: ...
    @classmethod
    def __from_ctypes__(cls, *values: CData) -> Struct: ...
    __simple__: type[ctypes.Structure] = ...


class Short(CType):
    __type__: str = ...

    def __init__(self, value: int, /) -> None: ...
    def __int__(self) -> int: ...


class UShort(CType):
    __type__: str = ...

    def __init__(self, value: int, /) -> None: ...
    def __int__(self) -> int: ...


class Int(CType):
    __type__: str = ...

    def __init__(self, value: int, /) -> None: ...
    def __int__(self) -> int: ...


class UInt(CType):
    __type__: str = ...

    def __init__(self, value: int, /) -> None: ...
    def __int__(self) -> int: ...


class Long(CType):
    __type__: str = ...

    def __init__(self, value: int, /) -> None: ...
    def __int__(self) -> int: ...


class ULong(CType):
    __type__: str = ...

    def __init__(self, value: int, /) -> None: ...
    def __int__(self) -> int: ...


class LongLong(CType):
    __type__: str = ...

    def __init__(self, value: int, /) -> None: ...
    def __int__(self) -> int: ...


class ULongLong(CType):
    __type__: str = ...

    def __init__(self, value: int, /) -> None: ...
    def __int__(self) -> int: ...


class Size_t(CType):
    __type__: str = ...

    def __init__(self, value: int, /) -> None: ...
    def __int__(self) -> int: ...


class SSize_t(CType):
    __type__: str = ...

    def __init__(self, value: int, /) -> None: ...
    def __int__(self) -> int: ...


class Bool(CType):
    __type__: str = ...

    def __init__(self, value: bool, /) -> None: ...
    def __int__(self) -> int: ...
    def __bool__(self) -> bool: ...


class Float(CType):
    __type__: str = ...

    def __init__(self, value: float, /) -> None: ...


class Double(CType):
    __type__: str = ...

    def __init__(self, value: float, /) -> None: ...


class LongDouble(CType):
    __type__: str = ...
    __simple__: type[CData] = ...

    def __init__(self, value: float, /) -> None: ...


class Char(CType):
    __type__: str = ...

    def __init__(self, value: bytes, /) -> None: ...


class WChar(CType):
    __type__: str = ...

    def __init__(self, value: str, /) -> None: ...


class Byte(CType):
    __type__: str = ...


    def __init__(self, value: bytes, /) -> None: ...


class UByte(CType):
    __type__: str = ...

    def __init__(self, value: bytes, /) -> None: ...


class PyObject(Struct):
    ob_refcnt: SSize_t
    ob_type: Pointer[PyTypeObject]


class PyTypeObject(Struct):
    ob_base: PyVarObject
    tp_name: Pointer[Char]
    tp_basicsize: SSize_t
    tp_itemsize: SSize_t
    tp_vectorcall_offset: SSize_t
    tp_getattr: Pointer[CFunction]
    tp_setattr: Pointer[CFunction]
    tp_as_async: Pointer
    tp_repr: Pointer[CFunction]
    tp_as_number: Pointer
    tp_as_sequence: Pointer
    tp_as_mapping: Pointer
    tp_hash: Pointer[CFunction]
    tp_call: Pointer[CFunction]
    tp_str: Pointer[CFunction]
    tp_getattro: Pointer[CFunction]
    tp_setattro: Pointer[CFunction]
    tp_as_buffer: Pointer
    tp_flags: ULong
    tp_doc: Pointer[Char]
    tp_traverse: Pointer[CFunction]
    tp_clear: Pointer[CFunction]
    tp_richcompare: Pointer  # real type is Pointer[CFunction]
    tp_weaklistoffset: SSize_t
    tp_iter: Pointer  # real type is Pointer[CFunction]
    tp_iternext: Pointer  # real type is Pointer[CFunction]
    tp_methods: Pointer  # real type is Pointer[PyMethodDef]
    tp_members: Pointer  # real type is Pointer[PyMemberDef]
    tp_getset: Pointer  # real type is Pointer[PyGetSetDef]
    tp_base: Pointer  # real type is Pointer[PyTypeObject]
    tp_dict: Pointer[PyObject]
    tp_descr_get: Pointer  # real type is Pointer[CFunction]
    tp_descr_set: Pointer  # real type is Pointer[CFunction]
    tp_dictoffset: SSize_t
    tp_init: Pointer  # real type is Pointer[CFunction]
    tp_alloc: Pointer  # real type is Pointer[CFunction]
    tp_new: Pointer  # real type is Pointer[CFunction]
    tp_free: Pointer  # real type is Pointer[CFunction]
    tp_is_gc: Pointer  # real type is Pointer[CFunction]
    tp_bases: Pointer[PyObject]
    tp_mro: Pointer[PyObject]
    tp_cache: Pointer[PyObject]
    tp_subclasses: Pointer[PyObject]
    tp_weaklist: Pointer[PyObject]
    tp_del: Pointer  # real type is Pointer[CFunction]
    tp_version_tag: UInt
    tp_finalize: Pointer  # real type is Pointer[CFunction]
    tp_vectorcall: Pointer  # real type is Pointer[CFunction]


def __finalize__() -> None: ...
