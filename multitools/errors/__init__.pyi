import sys
from typing import Any, TypeVar

from .._typeshed import Traceback


_ErrType = TypeVar('_ErrType', bound=type[BaseException])


class AdvancedException(Exception):
    def __new__(cls, *args, depth: int = ..., **kwargs) -> AdvancedException: ...
    def __init__(self, *args, depth: int = ..., **kwargs) -> None: ...
    def __class_getitem__(cls, item: type[_ErrType]) -> type[AdvancedException]: ...
    def __excepthook__(self, traceback: Traceback) -> Any: ...
    @classmethod
    def force_depth(cls, error: _ErrType, depth: int = ...) -> _ErrType: ...
    depth: int = ...


class UnresolvedExternalError(AdvancedException[NameError]): ...

class ThreadError(AdvancedException): ...

class ProcessError(AdvancedException[ProcessLookupError]): ...

class ProcessModelError(ProcessError): ...

class UnknownProcessError(ProcessError): ...

class ProcessActivityError(ProcessError): ...


def err_depth(etype: _ErrType, *args, depth: int = ...) -> _ErrType: ...


def __finalize__() -> None: ...
