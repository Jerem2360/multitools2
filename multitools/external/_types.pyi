from .._meta import *
from ..system import SecretCtypes

from typing import Union, Literal, Optional, Any


ByteOrder = Literal['big', 'little']


class CInstanceType(metaclass=MultiMeta):
    value: object = ...
    handle: SecretCtypes.CData = ...
    ctype: Optional[type[CType]] = ...
    __extra__: dict = ...

    @classmethod
    def __new__(cls, *args, **kwargs) -> CInstanceType: ...
    def __init__(self, handle: SecretCtypes.CData) -> None: ...
    def get(self) -> object: ...
    def __repr__(self) -> str: ...
    @classmethod
    def __class_instancecheck__(cls, instance: object) -> bool: ...
    @classmethod
    def __class_subclasscheck__(cls, subclass: type) -> bool: ...


class CType(metaclass=MultiMeta):
    __c_origin__: type[SecretCtypes.CData] = ...
    __py_origin__: type = ...
    __instance_type__: type[CInstanceType] = ...
    __tpname__: str = ...
    __tpwords__: list[str] = ...
    __extra__: dict = ...

    @classmethod
    def __new__(cls, *args, **kwargs) -> CInstanceType: ...
    def __init__(self, *args, **kwargs) -> CInstanceType: ...
    @classmethod
    def __class_instancecheck__(cls, instance: CInstanceType) -> bool: ...
    @classmethod
    def __class_subclasscheck__(cls, subclass: type) -> bool: ...
    @classmethod
    def __class_getitem__(cls, item: Union[tuple, object]) -> type[CType]: ...
    @classmethod
    def __detail__(cls, *args) -> type[CType]: ...
    @classmethod
    def __to_c__(cls, instance: CInstanceType) -> SecretCtypes.CData: ...
    @classmethod
    def __to_py__(cls, instance: CInstanceType) -> object: ...
    @classmethod
    def __from_c__(cls, c_instance: Optional[SecretCtypes.CData]) -> CInstanceType: ...


class CIntInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes.CData] = ...

    # noinspection PyMissingConstructor
    def __init__(self, value: int) -> None: ...


class Int(CType, metaclass=MultiMeta):
    signed: bool = ...
    byteorder: ByteOrder = ...

    __c_origin__: type[SecretCtypes.CData] = ...
    __py_origin__: type = ...
    __instance_type__: type[CInstanceType] = ...

    @classmethod
    def __detail__(cls, signed: bool, byteorder: ByteOrder, *args) -> type[Int]: ...


class CLongInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes.CData] = ...

    # noinspection PyMissingConstructor
    def __init__(self, value: int) -> None: ...


class Long(Int, metaclass=MultiMeta):
    long: bool = ...

    __c_origin__: type[SecretCtypes.CData] = ...
    __py_origin__: type = ...
    __instance_type__: type[CInstanceType] = ...

    # noinspection PyMethodOverriding
    @classmethod
    def __detail__(cls, signed: bool, byteorder: ByteOrder, long: bool, *args) -> type[Long]: ...


class CShortInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes.CData] = ...

    # noinspection PyMissingConstructor
    def __init__(self, value: int) -> None: ...


class Short(Int, metaclass=MultiMeta):
    __c_origin__: type[SecretCtypes.CData] = ...
    __instance_type__: type[CInstanceType] = ...


class CSize_tInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes.CData] = ...

    # noinspection PyMissingConstructor
    def __init__(self, value: int) -> None: ...


class Size_t(Int[False, 'big'], metaclass=MultiMeta):
    __c_origin__: type[SecretCtypes.CData] = ...
    __instance_type__: type[CInstanceType] = ...

    @classmethod
    def __detail__(cls, *args) -> type[Size_t]: ...


class CSsize_tInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes] = ...

    # noinspection PyMissingConstructor
    def __init__(self, value: int) -> None: ...


class SSize_t(Int[True, 'big'], metaclass=MultiMeta):
    __c_origin__: type[SecretCtypes.CData] = ...
    __instance_type__: type[CInstanceType] = ...

    @classmethod
    def __detail__(cls, *args) -> type[SSize_t]: ...


class CFloatInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes.CData] = ...

    # noinspection PyMissingConstructor
    def __init__(self, value: float) -> None: ...


class Float(CType, metaclass=MultiMeta):
    __c_origin__: type[SecretCtypes.CData] = ...
    __py_origin__: type = ...
    __instance_type__: type[CInstanceType] = ...


class CDoubleInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes.CData] = ...

    # noinspection PyMissingConstructor
    def __init__(self, value: float) -> None: ...


class Double(Float, metaclass=MultiMeta):
    long: bool = ...

    __c_origin__: type[SecretCtypes.CData] = ...
    __instance_type__: type[CInstanceType] = ...

    @classmethod
    def __detail__(cls, long: bool, *args) -> type[Double]: ...


class CBoolInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes.CData] = ...

    # noinspection PyMissingConstructor
    def __init__(self, value: bool) -> None: ...


class Bool(CType, metaclass=MultiMeta):
    __c_origin__: type[SecretCtypes.CData] = ...
    __py_origin__: type = ...
    __instance_type__: type[CInstanceType] = ...


class CStrInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes.CData] = ...

    encoding: str = ...

    # noinspection PyMissingConstructor
    def __init__(self, value: str) -> None: ...


class Str(CType, metaclass=MultiMeta):
    encoding: str = ...

    __c_origin__: type[SecretCtypes.CData] = ...
    __py_origin__: type = ...
    __instance_type__: type[CInstanceType] = ...

    def __new__(cls, *args, **kwargs) -> CStrInstance: ...
    @classmethod
    def __detail__(cls, encoding: str, *args) -> type[Str]: ...
    @classmethod
    def __to_py__(cls, instance: CInstanceType) -> str: ...


class CCharInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes.CData] = ...

    # noinspection PyMissingConstructor
    def __init__(self, value: str) -> None: ...


class Char(CType, metaclass=MultiMeta):
    encoding: str = ...

    __c_origin__: type[SecretCtypes.CData] = ...
    __py_origin__: type = ...
    __instance_type__: type[CInstanceType] = ...

    def __new__(cls, *args, **kwargs) -> CCharInstance: ...
    @classmethod
    def __detail__(cls, encoding: str, *args) -> type[Char]: ...
    @classmethod
    def __to_py__(cls, instance: CInstanceType) -> str: ...


class NullInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type = ...

    # noinspection PyMissingConstructor
    def __init__(self, *args, **kwargs) -> None: ...
    # valid conversions:
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    def __bool__(self) -> bool: ...
    def __bytes__(self) -> bytes: ...
    def __repr__(self) -> str: ...

    # hidden python callback functions for type-checking logic


class Null(CType, metaclass=MultiMeta):
    __c_origin__: type = ...
    __py_origin__: type = ...
    __instance_type__: type[CInstanceType] = ...

    @classmethod
    def __to_c__(cls, instance: CInstanceType) -> SecretCtypes.CData: ...
    @classmethod
    def __to_py__(cls, instance: CInstanceType) -> object: ...
    @classmethod
    def __from_c__(cls, c_instance: None) -> CInstanceType: ...


class CBytesInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes.CData] = ...

    # noinspection PyMissingConstructor
    def __init__(self, value: bytes) -> None: ...


class Bytes(CType, metaclass=MultiMeta):
    signed: bool = ...

    __c_origin__: type[SecretCtypes.CData] = ...
    __py_origin__: type = ...
    __instance_type__: type[CInstanceType] = ...

    @classmethod
    def __detail__(cls, signed: bool, *args) -> type[Bytes]: ...


class CPtrInstance(CInstanceType, metaclass=MultiMeta):
    __clsname__: str = ...
    __origin__: type[SecretCtypes.CData] = ...

    # noinspection PyMissingConstructor
    def __init__(self, address: int) -> None: ...


class Ptr(CType, metaclass=MultiMeta):
    __c_origin__: type[SecretCtypes.CData] = ...
    __py_origin__: type = ...
    __instance_type__: type[CInstanceType] = ...

    def __new__(cls, *args, **kwargs) -> CPtrInstance: ...
    @classmethod
    def __detail__(cls, type_: type[CType], *args) -> type[Ptr]: ...
    @classmethod
    def addressof(cls, obj: Any) -> Ptr: ...
    @classmethod
    def __to_c__(cls, instance: CInstanceType) -> SecretCtypes.CData: ...
    @classmethod
    def __to_py__(cls, instance: CInstanceType) -> int: ...

