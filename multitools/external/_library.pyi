from ._types import *
import _ctypes
from typing import Optional, Any, TypeVar, overload
from ..system import Library as _Library


NULL: NullInstance = ...

CCallArg = TypeVar("CCallArg", str, bytes, int, float, bool, CInstanceType)
CResult = TypeVar("CResult", int, bytes, CInstanceType)
CValidType = TypeVar("CValidType", int, bytes, str, float, type(None), CType)
Flag = TypeVar("Flag", int, None)


class ExternalFunction(metaclass=MultiMeta):
    def __init__(self, funcptr: _ctypes.CFuncPtr, argtypes: tuple[type], restype: Optional[type]) -> None: ...
    def __call__(self, *args: CCallArg, **kwargs: CCallArg) -> CResult: ...
    def set_argtypes(self, argtypes: tuple[type[CValidType], ...]) -> None: ...
    def set_restype(self, restype: type[CValidType]) -> None: ...


class Library(metaclass=MultiMeta):
    # library loading flags:
    DONT_RESOLVE_DLL_REFERENCES: Flag = ...
    LOAD_IGNORE_CODE_AUTHZ_LEVEL: Flag = ...
    LOAD_LIBRARY_AS_DATAFILE: Flag = ...
    LOAD_LIBRARY_AS_DATAFILE_EXCULSIVE: Flag = ...
    LOAD_LIBRARY_AS_IMAGE_RESOURCE: Flag = ...
    LOAD_LIBRARY_SEARCH_APPLICATION_DIR: Flag = ...
    LOAD_LIBRARY_SEARCH_DEFAULT_DIRS: Flag = ...
    LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR: Flag = ...
    LOAD_LIBRARY_SEARCH_SYSTEM32: Flag = ...
    LOAD_LIBRARY_SEARCH_USER_DIRS: Flag = ...
    LOAD_WITH_ALTERED_SEARCH_PATH: Flag = ...
    LOAD_LIBRARY_REQUIRE_SIGNED_TARGET: Flag = ...
    LOAD_LIBRARY_SAFE_CURRENT_DIRS: Flag = ...
    # function loading flags:
    cdecl: Flag = ...
    FUNCFLAG_HRESULT: Flag = ...
    FUNCFLAG_PYTHONAPI: Flag = ...
    stdcall: Flag = ...
    FUNCFLAG_USE_ERRNO: Flag = ...
    FUNCFLAG_USE_LASTERROR: Flag = ...

    def __init__(self, library: _Library) -> None: ...
    def __getattr__(self, item: str) -> ExternalFunction: ...
    def __getitem__(self, item: int) -> ExternalFunction: ...
    @overload
    def load_function(self, name: str, argtypes: tuple[type] = ..., restype: Optional[type] = ..., flags: Flag = ...) -> ExternalFunction: ...
    @overload
    def load_function(self, ordinal: int, argtypes: tuple[type] = ..., restype: Optional[type] = ..., flags: Flag = ...) -> ExternalFunction: ...
    @staticmethod
    def load(library: str, flags: Flag = ...) -> Library: ...
    def __repr__(self) -> str: ...

