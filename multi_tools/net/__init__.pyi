from dataclasses import dataclass as _dataclass
from typing import Any as _Any, overload as _overload, Optional as _Optional, Literal as _Literal, TypeVar as _TypeVar
from socket import socket as _socket


_ByteOrder = _Literal['big', 'little']



@_dataclass
class Address(object):
    address: str
    port: int


@_dataclass
class User(object):
    address: Address
    sock: Socket


class Package(object):
    def __init__(self, data: bytes): ...

    def __str__(self) -> str: ...

    def __repr__(self) -> str: ...

    def __len__(self) -> int: ...

    def to_int(self, byteorder: _ByteOrder = ...) -> int: ...

    def to_bool(self, byteorder: _ByteOrder = ...) -> bool: ...

    def to_float(self, byteorder: _ByteOrder = ...) -> float: ...

    def to_str(self, encoding: str = ...) -> str: ...

    @staticmethod
    def from_int(value: int, byteorder: _ByteOrder = ...) -> Package: ...

    @staticmethod
    def from_long(value: int, byteorder: _ByteOrder = ...) -> Package: ...

    @staticmethod
    def from_bool(value: bool, byteorder: _ByteOrder = ...) -> Package: ...

    @staticmethod
    def from_float(value: float, byteorder: _ByteOrder = ...) -> Package: ...

    @staticmethod
    def from_double(value: float, byteorder: _ByteOrder = ...) -> Package: ...

    @staticmethod
    def from_str(value: str, encoding: str = ...) -> Package: ...

    @property
    def data(self) -> bytes: ...


class Socket(object):

    @_overload
    def __init__(self, host: Address, family: int = ..., type_: int = ..., proto: int = ...): ...

    @_overload
    def __init__(self, socket: _socket, host: Address): ...

    def accept(self) -> User: ...

    def bind(self) -> None: ...

    def close(self) -> None: ...

    def connect(self) -> int: ...

    def detach(self) -> int: ...

    def duplicate(self) -> Socket: ...

    def listen(self, backlog: _Optional[float] = ...) -> None: ...

    def share(self, pid: int) -> bytes: ...

    @staticmethod
    def from_share(info: bytes, host: Address) -> Socket: ...

    @property
    def blocking(self) -> bool: ...

    @blocking.setter
    def blocking(self, value: bool) -> None: ...

    @property
    def timeout(self) -> _Optional[float]: ...

    @timeout.setter
    def timeout(self, value: _Optional[float]) -> None: ...

    @property
    def fileno(self) -> int: ...


