from typing import TypeVar as _TypeVar, Any as _Any, Optional as _Optional, overload as _overload, Generic as _Generic, Optional as _Optional
from _io import TextIOWrapper as _TextIOWrapper


_DT = _TypeVar('_DT')


class Stream(_Generic[_DT]):
    def __init__(self, handle, io_type: type[_DT], read: str = ..., write: str = ...): ...

    def __read__(self, *args, **kwargs) -> _DT: ...

    def __write__(self, data: _DT, flush: bool = False, **kwargs) -> _Any: ...

    def read(self, *args, **kwargs) -> _DT: ...

    def write(self, data: _DT, *extra: _DT, sep: _DT = ..., end: _DT = ..., flush: bool = False, **kwargs) -> _Any: ...

    def __readable__(self) -> _Optional[bool]: ...

    def __writable__(self) -> _Optional[bool]: ...

    @property
    def handle(self): ...

    @handle.setter
    def handle(self, value): ...

    @property
    def fileno(self) -> int: ...

    @property
    def readable(self) -> _Optional[bool]: ...

    @property
    def writable(self) -> _Optional[bool]: ...


class TextIO(Stream[str]):
    @_overload
    def __init__(self, fp: str): ...

    @_overload
    def __init__(self, s: _TextIOWrapper, is_file: bool = ..., file: str = ...): ...

    def __read__(self, *args, **kwargs) -> str: ...

    def __write__(self, data: str, flush: bool = False, overwrite: bool = ...) -> _Any: ...

    def read(self, *args, **kwargs) -> str: ...

    def write(self, data: str, *extra: str, sep: str = ..., end: str = ..., flush: bool = False, overwrite: bool = ...) -> _Any: ...

    def __readable__(self) -> _Optional[bool]: ...

    def __writable__(self) -> _Optional[bool]: ...

