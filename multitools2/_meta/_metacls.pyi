from typing import Iterable, overload, Any

from . import _data, _field


class MultiMeta(type):
    @overload
    def __new__(mcs, name: str, bases: Iterable[type], np: dict[str, Any], abstract: bool = ...) -> MultiMeta: ...
    @overload
    def __new__(mcs, source: MultiMeta, abstract: bool = ...) -> MultiMeta: ...
    @overload
    def __init__(cls, name: str, bases: Iterable[type], np: dict[str, Any], abstract: bool = ...) -> None: ...
    @overload
    def __init__(cls, source: MultiMeta, abstract: bool = ...) -> None: ...

    def __getattribute__(cls, item: str) -> Any: ...
    def __setattr__(cls, key: str, value: Any): ...
    def __call__(cls, *args, **kwargs) -> Any: ...

    __data__: _data.ClsData = ...
    instance_fields: dict[str, _field.FieldWrapper]

