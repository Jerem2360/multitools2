from typing import Any, overload, Iterable, TypeVar
from dataclasses import dataclass
from ._locals import *


_Decoration = TypeVar("_Decoration", bound=str)


class MultiMeta(MultiType):
    @overload
    def __new__(mcs, name: str, bases: Iterable[type], np: dict[str, Any], decorations: list[_Decoration] = ...) -> MultiMeta: ...
    @overload
    def __new__(mcs, source: MultiMeta, decorations: list[_Decoration] = ...) -> MultiMeta: ...
    @overload
    def __init__(cls, name: str, bases: Iterable[type], np: dict[str, Any], decorations: list[_Decoration] = ...) -> None: ...
    @overload
    def __init__(cls, source: MultiMeta, decorations: list[_Decoration] = ...) -> None: ...
    def __getattr__(cls, item: str) -> Any: ...
    def __setattr__(cls, key: str, value: Any) -> None: ...
    def __call__(cls, *args, **kwargs) -> Any: ...
    __data__: Data = ...

