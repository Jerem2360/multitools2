from . import _misc
from typing import Any, overload
from dataclasses import dataclass


class instance:
    def __init__(self, *args, **kwargs) -> None:
        self.value = ...


class FieldWrapper(metaclass=_misc.SimpleMeta):
    __abstract__: bool = ...
    __static__: bool = ...
    is_function: bool = ...
    value: Any = ...

    def __init__(self, value: Any) -> None: ...


class MultiSuper(metaclass=_misc.SimpleMeta):
    def __init__(self, __self__: Any) -> None:
        self.__self__ = ...
    def __getattr__(self, item: str) -> Any: ...
    def __repr__(self) -> str: ...


@dataclass
class ClsData(metaclass=_misc.SimpleMeta):
    name: str
    abstract: bool
    field_defs: tuple[str]
    static_fields: dict[str, FieldWrapper]
    instance_fields: dict[str, FieldWrapper]


class MultiMeta(type):
    @overload
    def __new__(mcs, name: str, bases: tuple, dct: dict, abstract: bool = ...) -> MultiMeta: ...
    @overload
    def __new__(mcs, source: MultiMeta, abstract: bool = ...) -> MultiMeta: ...

    # noinspection PyMissingConstructor
    @overload
    def __init__(cls, name: str, bases: tuple, dct: dict, abstract: bool = ...) -> None: ...
    @overload
    def __init__(cls, source: MultiMeta, abstract: bool = ...) -> None: ...

    def __setattr__(cls, key: str, value: Any) -> None: ...
    def __getattr__(self, item: str) -> Any: ...
    def __builtin_setattr__(cls, key: str, value: Any) -> None: ...
    def __builtin_getattr__(cls, item: str) -> Any: ...
    def __super__(cls) -> type: ...
    def __repr__(cls) -> str: ...
    def __call__(cls, *args, **kwargs) -> Any: ...
    instance_attrs: _misc.GetSetDict = ...
    __data__: ClsData = ...

